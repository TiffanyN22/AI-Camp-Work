{"backend_state":"init","kernel":"cv_env","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"trust":true,"type":"settings"}
{"id":"4a0929","input":"import os, requests, lxml, re, json, urllib.request\nfrom bs4 import BeautifulSoup\nfrom serpapi import GoogleSearch\n\nheaders = {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36\"\n}\n\nparams = {\n    \"q\": \"mincraft wallpaper 4k\", # search query\n    \"tbm\": \"isch\",                # image results\n    \"hl\": \"en\",                   # language of the search\n    \"gl\": \"us\",                   # country where search comes from\n    \"ijn\": \"0\"                    # page number\n}\n\nhtml = requests.get(\"https://www.google.com/search\", params=params, headers=headers, timeout=30)\nsoup = BeautifulSoup(html.text, \"lxml\")\n\ndef get_images_with_request_headers():\n    del params[\"ijn\"]\n    params[\"content-type\"] = \"image/png\" # parameter that indicate the original media type\n\n    return [img[\"src\"] for img in soup.select(\"img\")]\n\ndef get_suggested_search_data():\n    suggested_searches = []\n\n    all_script_tags = soup.select(\"script\")\n\n    # https://regex101.com/r/48UZhY/6\n    matched_images = \"\".join(re.findall(r\"AF_initDataCallback\\(({key: 'ds:1'.*?)\\);</script>\", str(all_script_tags)))\n    \n    # https://kodlogs.com/34776/json-decoder-jsondecodeerror-expecting-property-name-enclosed-in-double-quotes\n    # if you try to json.loads() without json.dumps it will throw an error:\n    # \"Expecting property name enclosed in double quotes\"\n    matched_images_data_fix = json.dumps(matched_images)\n    matched_images_data_json = json.loads(matched_images_data_fix)\n\n    # search for only suggested search thumbnails related\n    # https://regex101.com/r/ITluak/2\n    suggested_search_thumbnails = \",\".join(re.findall(r'{key(.*?)\\[null,\\\"Size\\\"', matched_images_data_json))\n\n    # https://regex101.com/r/MyNLUk/1\n    suggested_search_thumbnail_encoded = re.findall(r'\\\"(https:\\/\\/encrypted.*?)\\\"', suggested_search_thumbnails)\n\n    for suggested_search, suggested_search_fixed_thumbnail in zip(soup.select(\".PKhmud.sc-it.tzVsfd\"), suggested_search_thumbnail_encoded):\n        suggested_searches.append({\n            \"name\": suggested_search.select_one(\".VlHyHc\").text,\n            \"link\": f\"https://www.google.com{suggested_search.a['href']}\",\n            # https://regex101.com/r/y51ZoC/1\n            \"chips\": \"\".join(re.findall(r\"&chips=(.*?)&\", suggested_search.a[\"href\"])),\n            # https://stackoverflow.com/a/4004439/15164646 comment by Frédéric Hamidi\n            \"thumbnail\": bytes(suggested_search_fixed_thumbnail, \"ascii\").decode(\"unicode-escape\")\n        })\n\n    return suggested_searches\n\ndef get_original_images():\n\n    \"\"\"\n    https://kodlogs.com/34776/json-decoder-jsondecodeerror-expecting-property-name-enclosed-in-double-quotes\n    if you try to json.loads() without json.dumps() it will throw an error:\n    \"Expecting property name enclosed in double quotes\"\n    \"\"\"\n\n    google_images = []\n\n    all_script_tags = soup.select(\"script\")\n\n    # # https://regex101.com/r/48UZhY/4\n    matched_images_data = \"\".join(re.findall(r\"AF_initDataCallback\\(([^<]+)\\);\", str(all_script_tags)))\n    \n    matched_images_data_fix = json.dumps(matched_images_data)\n    matched_images_data_json = json.loads(matched_images_data_fix)\n\n    # https://regex101.com/r/pdZOnW/3\n    matched_google_image_data = re.findall(r'\\[\\\"GRID_STATE0\\\",null,\\[\\[1,\\[0,\\\".*?\\\",(.*),\\\"All\\\",', matched_images_data_json)\n\n    # https://regex101.com/r/NnRg27/1\n    matched_google_images_thumbnails = \", \".join(\n        re.findall(r'\\[\\\"(https\\:\\/\\/encrypted-tbn0\\.gstatic\\.com\\/images\\?.*?)\\\",\\d+,\\d+\\]',\n                   str(matched_google_image_data))).split(\", \")\n\n    thumbnails = [\n        bytes(bytes(thumbnail, \"ascii\").decode(\"unicode-escape\"), \"ascii\").decode(\"unicode-escape\") for thumbnail in matched_google_images_thumbnails\n    ]\n\n    # removing previously matched thumbnails for easier full resolution image matches.\n    removed_matched_google_images_thumbnails = re.sub(\n        r'\\[\\\"(https\\:\\/\\/encrypted-tbn0\\.gstatic\\.com\\/images\\?.*?)\\\",\\d+,\\d+\\]', \"\", str(matched_google_image_data))\n\n    # https://regex101.com/r/fXjfb1/4\n    # https://stackoverflow.com/a/19821774/15164646\n    matched_google_full_resolution_images = re.findall(r\"(?:'|,),\\[\\\"(https:|http.*?)\\\",\\d+,\\d+\\]\", removed_matched_google_images_thumbnails)\n\n    full_res_images = [\n        bytes(bytes(img, \"ascii\").decode(\"unicode-escape\"), \"ascii\").decode(\"unicode-escape\") for img in matched_google_full_resolution_images\n    ]\n    \n    for index, (metadata, thumbnail, original) in enumerate(zip(soup.select('.isv-r.PNCib.MSM1fd.BUooTd'), thumbnails, full_res_images), start=1):\n        google_images.append({\n            \"title\": metadata.select_one(\".VFACy.kGQAp.sMi44c.lNHeqe.WGvvNb\")[\"title\"],\n            \"link\": metadata.select_one(\".VFACy.kGQAp.sMi44c.lNHeqe.WGvvNb\")[\"href\"],\n            \"source\": metadata.select_one(\".fxgdke\").text,\n            \"thumbnail\": thumbnail,\n            \"original\": original\n        })\n\n        # Download original images\n        print(f'Downloading {index} image...')\n        \n        opener=urllib.request.build_opener()\n        opener.addheaders=[('User-Agent','Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36')]\n        urllib.request.install_opener(opener)\n\n        urllib.request.urlretrieve(original, f'Bs4_Images/original_size_img_{index}.jpg')\n\n    return google_images","pos":0,"state":"done","type":"cell"}
{"id":0,"time":1660254517702,"type":"user"}
{"last_load":1660242175243,"type":"file"}